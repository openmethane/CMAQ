#! /bin/csh -f

# ===================== BCONv5.0.2 Build Script ===================== #
# Usage: bldit.bcon >&! bldit.bcon.log                                #
# Requirements: I/O API & netCDF libs, and a Fortran compiler         #
# Note that this script is configured/tested for Red Hat Linux O/S    #
# The following environment variables must be set for this script to  #
# build an executable.                                                #
#   setenv M3MODEL <source code repository>                           #
#   setenv M3LIB   <code libraries>                                   #
# To report problems or request help with this script/program:        #
#             http://www.cmascenter.org/html/help.html                #
# =================================================================== #

#> Source the config.cmaq file to set the build environment
 source ../config.cmaq

#> Check for M3HOME and M3LIB settings:
 if ( ! -e $M3HOME || ! -e $M3LIB ) then
    echo "   $M3HOME or $M3LIB directory not found"
    exit 1
 endif
 echo "    Model repository base path: $M3HOME"
 echo "                  library path: $M3LIB"

#> If $M3MODEL not set, default to $M3HOME
 if ( $?M3MODEL ) then
    echo "         Model repository path: $M3MODEL"
 else
    setenv M3MODEL $M3HOME
    echo " default Model repository path: $M3MODEL"
 endif

 set BLD_OS = `uname -s`        ## Script set up for Linux only 
 if ($BLD_OS != 'Linux') then
    echo "   $BLD_OS -> wrong bldit script for host!"
    exit 1
 endif

 set echo

#:#:#:#:#:#:#:#:#:#:#:# Begin User Input Section #:#:#:#:#:#:#:#:#:#:#:#

#> user choices: Git repository
 set GlobInc = $M3HOME/models/CCTM/ICL
 set Mechs   = $M3HOME/models/CCTM/MECHS
#git --work-tree=$M3MODEL status
#git status
 setenv REPOROOT $M3MODEL/BCON

#> user choices: base working directory
 set Base = $cwd
 set APPL  = D502a
 set CFG   = cfg.$APPL
 set MODEL = BCON_${APPL}_$EXEC_ID

#set Local   # do NOT copy the source files into the BLD directory -
             # comment out to copy the source files (default if not set)

#> The "BLD" directory for checking out and compiling source code
 set Bld = $Base/BLD_${APPL}
 if ( ! -e "$Bld" ) then
    mkdir $Bld
 else
    if ( ! -d "$Bld" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
    endif
 endif

 cd $Bld

#> user choices: bldmake command
#set MakeFileOnly   # builds a Makefile to make the model, but does not compile -
                    # comment out to also compile the model (default if not set)

#> user choices: various modules

 set ModCommon = common

#> If this is a nested simulation, use the m3conc option to extract BCs from a CCTM CONC file
 set ModType   = profile
#set ModType   = m3conc
#set ModType   = tracer

 set ModMech   = prof_data/cb05_ae6_aq
#set ModMech   = prof_data/saprc99_ae6_aq
#set ModMech   = prof_data/saprc07t_ae6_aq

#> user choices: mechanism
#set Mechanism = cb05cl_ae5_aq
#set Mechanism = cb05tucl_ae5_aq
 set Mechanism = cb05tucl_ae6_aq
#set Mechanism = cb05tump_ae6_aq
#set Mechanism = saprc99_ae5_aq
#set Mechanism = saprc99_ae6_aq
#set Mechanism = saprc07tb_ae6_aq
#set Mechanism = saprc07tc_ae6_aq
 set Tracer    = trac0               # default: no tracer species

#> user choices: computing system configuration:
#>    name of the "BLD" directory for checking out and compiling source code
#>    compiler name and location/link flags
#>    library paths

 set Bld = $Base/BLD_${APPL}

#> Set full path of Fortran 90 compiler
 set FC = ${myFC}
 set FP = $FC

#> Set location of M3Bld executable
 set Blder = $M3LIB/bldmake

#> Set location of libraries/include files
 set IOAPI  = "${M3LIB}/ioapi_3.1/Linux2_${system}${compiler_ext} -lioapi"
 set IOAPIMOD = ${M3LIB}/ioapi_3.1/Linux2_${system}${compiler_ext}

 set NETCDF = "${M3LIB}/netcdf/lib -lnetcdf"

#> Set compiler flags
 set F_FLAGS    = "${myFFLAGS} -I ${IOAPIMOD} -I."
 set F90_FLAGS  = "${myFRFLAGS} -I ${IOAPIMOD} -I."
 set CPP_FLAGS  = ""
 set C_FLAGS    = "${myCFLAGS} -DFLDMN"
 set LINK_FLAGS = "${myLINK_FLAG}"

#:#:#:#:#:#:#:#:#:#:#:# End of User Input Section :#:#:#:#:#:#:#:#:#:#:#:#:#

 if ( ! -e "$Bld" ) then
    mkdir $Bld
 else
    if ( ! -d "$Bld" ) then
       echo "   *** target exists, but not a directory ***"
       exit 1
    endif
 endif
 
 cd $Bld

#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#

 set Str1 =
 set Str2 =

 set LIB1 = "-L${IOAPI}"
 set LIB2 = "-L${NETCDF}"
 set LIBS = "$LIB1 $LIB2 ${extra_lib}"

 source $Base/relinc.bcon
 if ( $status ) exit 1

 set ICL_MECH  = $Mechs/$Mechanism
 set ICL_TRAC  = $Mechs/$Tracer

#> make the config file

 set Cfile = ${CFG}.bld
 set quote = '"'

 echo                                                               > $Cfile
 echo "model       $MODEL;"                                        >> $Cfile
 echo                                                              >> $Cfile
 echo "FPP         $FP;"                                           >> $Cfile
 echo                                                              >> $Cfile
 set text = "$quote$CPP_FLAGS$quote;"
 echo "cpp_flags   $text"                                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f_compiler  $FC;"                                           >> $Cfile
 echo                                                              >> $Cfile
 echo "f_flags     $quote$F_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "f90_flags   $quote$F90_FLAGS$quote;"                        >> $Cfile
 echo                                                              >> $Cfile
 echo "c_flags     $quote$C_FLAGS$quote;"                          >> $Cfile
 echo                                                              >> $Cfile
 echo "link_flags  $quote$LINK_FLAGS$quote;"                       >> $Cfile
 echo                                                              >> $Cfile
 echo "libraries   $quote$LIBS$quote;"                             >> $Cfile
 echo                                                              >> $Cfile

 set text="// mechanism:"
 echo "$text ${Mechanism}"                                         >> $Cfile
 echo "// model repository: ${M3MODEL}"                            >> $Cfile
 echo                                                              >> $Cfile
 if ( $compiler == gfort ) then
   set ICL_CONST = '.'
   set ICL_MECH = '.'
 endif
 echo "include SUBST_RXCMMN     $ICL_MECH/RXCM.EXT;"               >> $Cfile
 echo "include SUBST_RXDATA     $ICL_MECH/RXDT.EXT;"               >> $Cfile
 echo                                                              >> $Cfile

 echo "$Str1"                                                      >> $Cfile
 echo "$Str2"                                                      >> $Cfile
 echo                                                              >> $Cfile

 set text = "common"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModCommon};"                                       >> $Cfile
 echo                                                              >> $Cfile

 set text = "profile, m3conc, tracer"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModType};"                                         >> $Cfile
 echo                                                              >> $Cfile

 set text = "cb05, saprc99, saprc07t"
 echo "// options are" $text                                       >> $Cfile
 echo "Module ${ModMech};"                                         >> $Cfile
 echo                                                              >> $Cfile

 if ( $?ModMisc ) then
    echo "Module ${ModMisc};"                                      >> $Cfile
    echo                                                           >> $Cfile
 endif

#> make the Makefile or the model executable

 unalias mv rm
 if ( $?MakeFileOnly ) then
    if ( $?Local ) then
       $Blder -makefo -git_local $Cfile   # $Cfile = ${CFG}.bld
    else
       $Blder -makefo $Cfile
     # totalview -a $Blder -makefo $Cfile
    endif
 else   # also compile the model
    if ( $?Local ) then
       $Blder -git_local $Cfile
    else
       $Blder $Cfile
    endif
 endif

 mv Makefile $Bld/Makefile.$COMPILER
 if ( -e $Bld/Makefile.$COMPILER && -e $Bld/Makefile ) rm $Bld/Makefile
 ln -s $Bld/Makefile.$COMPILER $Bld/Makefile

 if ( $status != 0 ) then
    echo "   *** failure in $Blder ***"
    exit 1
 endif
 if ( -e "$Base/${CFG}" ) then
    echo "   >>> previous ${CFG} exists, re-naming to ${CFG}.old <<<"
    mv $Base/${CFG} $Base/${CFG}.old
 endif
 mv ${CFG}.bld $Bld/${CFG}

 set is_using_git = `ls -alog $M3MODEL | grep git | wc -l`

 if ( $is_using_git[1] ) then
#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#:#
 cd $M3MODEL
#set brnch = `git --work-tree=$M3MODEL branch`
 set brnch = `git branch`
 @ i = 0
 while ( $i < $#brnch )
    @ i++
    if ( "$brnch[$i]" == "*" ) @ l = $i + 1
 end
#set rep = `echo $M3MODEL | tr "/" "#"`
 set rep = `echo $cwd | tr "/" "#"`
 set rln = "repo:${rep},branch:${brnch[$l]},compiler:${COMPILER}"
 set ref = $Bld/$rln
 /bin/touch $ref
 if ( -d $M3MODEL/branch ) /bin/cp $M3MODEL/branch/branch.* $Bld
endif

 exit
